// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Erabikata.Models.Input.Plex;
//
//    var sessions = Sessions.FromJson(jsonString);

namespace Erabikata.Models.Input.Plex
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Sessions
    {
        [JsonProperty("MediaContainer")]
        public MediaContainer MediaContainer { get; set; }
    }

    public partial class MediaContainer
    {
        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("Metadata")]
        public Metadatum[] Metadata { get; set; }
    }

    public partial class Metadatum
    {
        [JsonProperty("addedAt")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long AddedAt { get; set; }

        [JsonProperty("art")]
        public string Art { get; set; }

        [JsonProperty("chapterSource")]
        public string ChapterSource { get; set; }

        [JsonProperty("contentRating")]
        public string ContentRating { get; set; }

        [JsonProperty("duration")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Duration { get; set; }

        [JsonProperty("grandparentArt")]
        public string GrandparentArt { get; set; }

        [JsonProperty("grandparentGuid")]
        public string GrandparentGuid { get; set; }

        [JsonProperty("grandparentKey")]
        public string GrandparentKey { get; set; }

        [JsonProperty("grandparentRatingKey")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long GrandparentRatingKey { get; set; }

        [JsonProperty("grandparentTheme")]
        public string GrandparentTheme { get; set; }

        [JsonProperty("grandparentThumb")]
        public string GrandparentThumb { get; set; }

        [JsonProperty("grandparentTitle")]
        public string GrandparentTitle { get; set; }

        [JsonProperty("guid")]
        public string Guid { get; set; }

        [JsonProperty("index")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Index { get; set; }

        [JsonProperty("key")]
        public string Key { get; set; }

        [JsonProperty("lastViewedAt")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long LastViewedAt { get; set; }

        [JsonProperty("librarySectionID")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long LibrarySectionId { get; set; }

        [JsonProperty("librarySectionKey")]
        public string LibrarySectionKey { get; set; }

        [JsonProperty("librarySectionTitle")]
        public string LibrarySectionTitle { get; set; }

        [JsonProperty("originallyAvailableAt")]
        public DateTimeOffset OriginallyAvailableAt { get; set; }

        [JsonProperty("parentGuid")]
        public string ParentGuid { get; set; }

        [JsonProperty("parentIndex")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ParentIndex { get; set; }

        [JsonProperty("parentKey")]
        public string ParentKey { get; set; }

        [JsonProperty("parentRatingKey")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ParentRatingKey { get; set; }

        [JsonProperty("parentThumb")]
        public string ParentThumb { get; set; }

        [JsonProperty("parentTitle")]
        public string ParentTitle { get; set; }

        [JsonProperty("rating")]
        public string Rating { get; set; }

        [JsonProperty("ratingKey")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long RatingKey { get; set; }

        [JsonProperty("sessionKey")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SessionKey { get; set; }

        [JsonProperty("skipParent")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SkipParent { get; set; }

        [JsonProperty("summary")]
        public string Summary { get; set; }

        [JsonProperty("thumb")]
        public string Thumb { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("updatedAt")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long UpdatedAt { get; set; }

        [JsonProperty("viewCount")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ViewCount { get; set; }

        [JsonProperty("viewOffset")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ViewOffset { get; set; }

        [JsonProperty("year")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Year { get; set; }

        [JsonProperty("Media")]
        public Media[] Media { get; set; }

        [JsonProperty("Director")]
        public Director[] Director { get; set; }

        [JsonProperty("Writer")]
        public Director[] Writer { get; set; }

        [JsonProperty("Producer")]
        public Director[] Producer { get; set; }

        [JsonProperty("User")]
        public User User { get; set; }

        [JsonProperty("Player")]
        public Player Player { get; set; }

        [JsonProperty("Session")]
        public Session Session { get; set; }

        [JsonProperty("titleSort", NullValueHandling = NullValueHandling.Ignore)]
        public string TitleSort { get; set; }

        [JsonProperty("TranscodeSession", NullValueHandling = NullValueHandling.Ignore)]
        public TranscodeSession TranscodeSession { get; set; }
    }

    public partial class Director
    {
        [JsonProperty("filter")]
        public string Filter { get; set; }

        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("tag")]
        public string Tag { get; set; }
    }

    public partial class Media
    {
        [JsonProperty("aspectRatio", NullValueHandling = NullValueHandling.Ignore)]
        public string AspectRatio { get; set; }

        [JsonProperty("audioChannels")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long AudioChannels { get; set; }

        [JsonProperty("audioCodec")]
        public string AudioCodec { get; set; }

        [JsonProperty("audioProfile")]
        public string AudioProfile { get; set; }

        [JsonProperty("bitrate")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Bitrate { get; set; }

        [JsonProperty("container")]
        public string Container { get; set; }

        [JsonProperty("duration")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Duration { get; set; }

        [JsonProperty("height")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Height { get; set; }

        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("videoCodec")]
        public string VideoCodec { get; set; }

        [JsonProperty("videoFrameRate")]
        public string VideoFrameRate { get; set; }

        [JsonProperty("videoProfile")]
        public string VideoProfile { get; set; }

        [JsonProperty("videoResolution")]
        public string VideoResolution { get; set; }

        [JsonProperty("width")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Width { get; set; }

        [JsonProperty("selected")]
        public bool Selected { get; set; }

        [JsonProperty("Part")]
        public Part[] Part { get; set; }

        [JsonProperty("optimizedForStreaming", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? OptimizedForStreaming { get; set; }

        [JsonProperty("protocol", NullValueHandling = NullValueHandling.Ignore)]
        public string Protocol { get; set; }
    }

    public partial class Part
    {
        [JsonProperty("audioProfile")]
        public string AudioProfile { get; set; }

        [JsonProperty("container")]
        public string Container { get; set; }

        [JsonProperty("duration")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Duration { get; set; }

        [JsonProperty("file", NullValueHandling = NullValueHandling.Ignore)]
        public string File { get; set; }

        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("key", NullValueHandling = NullValueHandling.Ignore)]
        public string Key { get; set; }

        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Size { get; set; }

        [JsonProperty("videoProfile")]
        public string VideoProfile { get; set; }

        [JsonProperty("decision")]
        public string Decision { get; set; }

        [JsonProperty("selected")]
        public bool Selected { get; set; }

        [JsonProperty("Stream")]
        public Stream[] Stream { get; set; }

        [JsonProperty("bitrate", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Bitrate { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Height { get; set; }

        [JsonProperty("optimizedForStreaming", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? OptimizedForStreaming { get; set; }

        [JsonProperty("protocol", NullValueHandling = NullValueHandling.Ignore)]
        public string Protocol { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Width { get; set; }
    }

    public partial class Stream
    {
        [JsonProperty("bitDepth", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? BitDepth { get; set; }

        [JsonProperty("bitrate")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Bitrate { get; set; }

        [JsonProperty("chromaSubsampling", NullValueHandling = NullValueHandling.Ignore)]
        public string ChromaSubsampling { get; set; }

        [JsonProperty("codec")]
        public string Codec { get; set; }

        [JsonProperty("codedHeight", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? CodedHeight { get; set; }

        [JsonProperty("codedWidth", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? CodedWidth { get; set; }

        [JsonProperty("colorPrimaries", NullValueHandling = NullValueHandling.Ignore)]
        public string ColorPrimaries { get; set; }

        [JsonProperty("colorRange", NullValueHandling = NullValueHandling.Ignore)]
        public string ColorRange { get; set; }

        [JsonProperty("colorSpace", NullValueHandling = NullValueHandling.Ignore)]
        public string ColorSpace { get; set; }

        [JsonProperty("colorTrc", NullValueHandling = NullValueHandling.Ignore)]
        public string ColorTrc { get; set; }

        [JsonProperty("default")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Default { get; set; }

        [JsonProperty("displayTitle")]
        public string DisplayTitle { get; set; }

        [JsonProperty("frameRate", NullValueHandling = NullValueHandling.Ignore)]
        public string FrameRate { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Height { get; set; }

        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("index", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Index { get; set; }

        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Level { get; set; }

        [JsonProperty("profile", NullValueHandling = NullValueHandling.Ignore)]
        public string Profile { get; set; }

        [JsonProperty("refFrames", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? RefFrames { get; set; }

        [JsonProperty("streamType")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long StreamType { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Width { get; set; }

        [JsonProperty("location")]
        public string Location { get; set; }

        [JsonProperty("channels", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Channels { get; set; }

        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }

        [JsonProperty("languageCode", NullValueHandling = NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }

        [JsonProperty("samplingRate", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? SamplingRate { get; set; }

        [JsonProperty("selected", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Selected { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("decision", NullValueHandling = NullValueHandling.Ignore)]
        public string Decision { get; set; }

        [JsonProperty("bitrateMode", NullValueHandling = NullValueHandling.Ignore)]
        public string BitrateMode { get; set; }
    }

    public partial class Player
    {
        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("device")]
        public string Device { get; set; }

        [JsonProperty("machineIdentifier")]
        public string MachineIdentifier { get; set; }

        [JsonProperty("model")]
        public string Model { get; set; }

        [JsonProperty("platform")]
        public string Platform { get; set; }

        [JsonProperty("platformVersion")]
        public string PlatformVersion { get; set; }

        [JsonProperty("product")]
        public string Product { get; set; }

        [JsonProperty("profile")]
        public string Profile { get; set; }

        [JsonProperty("remotePublicAddress")]
        public string RemotePublicAddress { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("vendor")]
        public string Vendor { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }

        [JsonProperty("local")]
        public bool Local { get; set; }

        [JsonProperty("relayed")]
        public bool Relayed { get; set; }

        [JsonProperty("secure")]
        public bool Secure { get; set; }

        [JsonProperty("userID")]
        public long UserId { get; set; }
    }

    public partial class Session
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("bandwidth")]
        public long Bandwidth { get; set; }

        [JsonProperty("location")]
        public string Location { get; set; }
    }

    public partial class TranscodeSession
    {
        [JsonProperty("key")]
        public string Key { get; set; }

        [JsonProperty("throttled")]
        public bool Throttled { get; set; }

        [JsonProperty("complete")]
        public bool Complete { get; set; }

        [JsonProperty("progress")]
        public string Progress { get; set; }

        [JsonProperty("speed")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Speed { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("remaining")]
        public long Remaining { get; set; }

        [JsonProperty("context")]
        public string Context { get; set; }

        [JsonProperty("sourceVideoCodec")]
        public string SourceVideoCodec { get; set; }

        [JsonProperty("sourceAudioCodec")]
        public string SourceAudioCodec { get; set; }

        [JsonProperty("videoDecision")]
        public string VideoDecision { get; set; }

        [JsonProperty("audioDecision")]
        public string AudioDecision { get; set; }

        [JsonProperty("protocol")]
        public string Protocol { get; set; }

        [JsonProperty("container")]
        public string Container { get; set; }

        [JsonProperty("videoCodec")]
        public string VideoCodec { get; set; }

        [JsonProperty("audioCodec")]
        public string AudioCodec { get; set; }

        [JsonProperty("audioChannels")]
        public long AudioChannels { get; set; }

        [JsonProperty("transcodeHwRequested")]
        public bool TranscodeHwRequested { get; set; }

        [JsonProperty("timeStamp")]
        public string TimeStamp { get; set; }

        [JsonProperty("maxOffsetAvailable")]
        public string MaxOffsetAvailable { get; set; }

        [JsonProperty("minOffsetAvailable")]
        public string MinOffsetAvailable { get; set; }
    }

    public partial class User
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("thumb")]
        public Uri Thumb { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }
    }

    public partial class Sessions
    {
        public static Sessions FromJson(string json) => JsonConvert.DeserializeObject<Sessions>(json, Erabikata.Models.Input.Plex.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Sessions self) => JsonConvert.SerializeObject(self, Erabikata.Models.Input.Plex.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
